spring:
  shardingsphere:
    datasource:
      names: assign,assign0,assign1
      assign:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/assign?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
        username: root
        password: 12345678
        # 数据源其他配置
        initialSize: 5
        minIdle: 5
        maxActive: 20
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        #filters: stat,wall,log4j
        maxPoolPreparedStatementPerConnectionSize: 20
        useGlobalDataSourceStat: true
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      assign0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/assign0?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
        username: root
        password: 12345678
        # 数据源其他配置
        initialSize: 5
        minIdle: 5
        maxActive: 20
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        #filters: stat,wall,log4j
        maxPoolPreparedStatementPerConnectionSize: 20
        useGlobalDataSourceStat: true
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      assign1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://127.0.0.1:3306/assign1?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true&tinyInt1isBit=false&allowMultiQueries=true&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true&rewriteBatchedStatements=true
        username: root
        password: 12345678
        # 数据源其他配置
        initialSize: 5
        minIdle: 5
        maxActive: 20
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: SELECT 1 FROM DUAL
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: true
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        #filters: stat,wall,log4j
        maxPoolPreparedStatementPerConnectionSize: 20
        useGlobalDataSourceStat: true
        connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
    rules:
      sharding:
        # 分片算法定义
        sharding-algorithms:
          bill_item_database_algorithm:
            type: CLASS_BASED
            props:
              # 分片策略
              strategy: standard
              # 分片算法类
              algorithmClassName: com.example.shardingjdbc5demo.config.CustomDatabaseShardingAlgorithm
              # 自定义名称
              dbName: assign
          # 12、自定义 STANDARD 标准算法
          bill_item_standard_custom_algorithm:
            type: CLASS_BASED
            props:
              # 分片策略
              strategy: standard
              # 分片算法类
              algorithmClassName: com.example.shardingjdbc5demo.config.CustomTableShardingAlgorithm
              # 自定义名称
              tableName: bill_item
          sub_bill_item_database_algorithm:
            type: CLASS_BASED
            props:
              # 分片策略
              strategy: standard
              # 分片算法类
              algorithmClassName: com.example.shardingjdbc5demo.config.CustomDatabaseShardingAlgorithm
              # 自定义名称
              dbName: assign
          # 12、自定义 STANDARD 标准算法
          sub_bill_item_standard_custom_algorithm:
            type: CLASS_BASED
            props:
              # 分片策略
              strategy: standard
              # 分片算法类
              algorithmClassName: com.example.shardingjdbc5demo.config.CustomTableShardingAlgorithm
              # 自定义名称
              tableName: sub_bill_item

        tables:
          # 逻辑表名称
          bill_item:
            # 数据节点：数据库.分片表
            actual-data-nodes: assign$->{0..1}.bill_item_${0..3}
            # 分库策略
            database-strategy:
              standard:
                sharding-column: bill_no
                sharding-algorithm-name: bill_item_database_algorithm
            # 分表策略
            table-strategy:
              standard:
                sharding-column: bill_no
                sharding-algorithm-name: bill_item_standard_custom_algorithm
          sub_bill_item:
            # 数据节点：数据库.分片表
            actual-data-nodes: assign$->{0..1}.sub_bill_item_${0..3}
            # 分库策略
            database-strategy:
              standard:
                sharding-column: detail_no
                sharding-algorithm-name: sub_bill_item_database_algorithm
            # 分表策略
            table-strategy:
              standard:
                sharding-column: detail_no
                sharding-algorithm-name: sub_bill_item_standard_custom_algorithm

    props:
      sql-show: true

mybatis-plus:
  mapper-locations: classpath*:/mappers/*Mapper.xml
  typeAliasesPackage: com.example.shardingjdbc5demo.domain.*
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl